#!/usr/bin/env node

import { readFileSync, writeFileSync, readdirSync, statSync, existsSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const DEPLOYMENTS_PATH = join(__dirname, "../../fhevm-hardhat-template/deployments");
const ABI_OUTPUT_PATH = join(__dirname, "../abi");

function generateABIFiles() {
  if (!existsSync(DEPLOYMENTS_PATH)) {
    console.warn("⚠️  Deployments directory not found. Skipping ABI generation.");
    console.warn("   Run 'npx hardhat deploy --network localhost' first.");
    return;
  }

  const networks = readdirSync(DEPLOYMENTS_PATH).filter((item) => {
    const path = join(DEPLOYMENTS_PATH, item);
    return statSync(path).isDirectory();
  });

  if (networks.length === 0) {
    console.warn("⚠️  No deployments found. Skipping ABI generation.");
    return;
  }

  const addressMap = {};

  for (const network of networks) {
    const networkPath = join(DEPLOYMENTS_PATH, network);
    const files = readdirSync(networkPath).filter((f) => f.endsWith(".json") && !f.includes("solcInput"));

    for (const file of files) {
      const contractName = file.replace(".json", "");
      const deployment = JSON.parse(readFileSync(join(networkPath, file), "utf-8"));

      if (!addressMap[contractName]) {
        addressMap[contractName] = {};
      }

      const chainIdKey = network === "localhost" ? "31337" : network === "sepolia" ? "11155111" : "unknown";
      
      addressMap[contractName][chainIdKey] = {
        address: deployment.address,
        blockNumber: deployment.receipt?.blockNumber || 0,
      };

      // Generate ABI file
      const abiContent = `// Auto-generated by genabi.mjs
export const ${contractName}ABI = ${JSON.stringify({ abi: deployment.abi }, null, 2)} as const;
`;
      writeFileSync(join(ABI_OUTPUT_PATH, `${contractName}ABI.ts`), abiContent);
      console.log(`✅ Generated ${contractName}ABI.ts`);
    }
  }

  // Generate separate address files for each contract
  for (const contractName of Object.keys(addressMap)) {
    const addressContent = `// Auto-generated by genabi.mjs
export const ${contractName}Addresses = ${JSON.stringify(addressMap[contractName], null, 2)} as const;
`;
    writeFileSync(join(ABI_OUTPUT_PATH, `${contractName}Addresses.ts`), addressContent);
    console.log(`✅ Generated ${contractName}Addresses.ts`);
  }

  console.log(`✅ Generated address mappings`);
  console.log("🎉 ABI generation complete!");
}

generateABIFiles();
